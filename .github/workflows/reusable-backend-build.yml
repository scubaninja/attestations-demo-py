name: Reusable Backend Build

on:
  workflow_call:
    inputs:
      runtime-version:
        description: 'Runtime version to use (e.g., 3.11 for Python, 18 for Node.js)'
        required: false
        type: string
        default: '3.11'
      runtime-type:
        description: 'Runtime type (python, node, java, dotnet, go)'
        required: false
        type: string
        default: 'python'
      build-command:
        description: 'Build command to run'
        required: false
        type: string
        default: ''
      test-command:
        description: 'Test command to run'
        required: false
        type: string
        default: ''
      install-command:
        description: 'Dependency installation command'
        required: false
        type: string
        default: ''
      build-path:
        description: 'Path to build output'
        required: false
        type: string
        default: './dist'
      enable-tests:
        description: 'Enable running tests'
        required: false
        type: boolean
        default: true
      enable-linting:
        description: 'Enable code quality checks'
        required: false
        type: boolean
        default: true
      
    outputs:
      build-status:
        description: 'Build completion status'
        value: ${{ jobs.backend-build.outputs.status }}
      artifact-path:
        description: 'Path to built artifacts'
        value: ${{ jobs.backend-build.outputs.artifact-path }}
      test-results:
        description: 'Test results summary'
        value: ${{ jobs.backend-build.outputs.test-results }}

jobs:
  backend-build:
    name: ⚙️ Backend Build
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.build-status.outputs.status }}
      artifact-path: ${{ steps.build-status.outputs.artifact-path }}
      test-results: ${{ steps.test-summary.outputs.results }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Runtime Environment
        id: setup-runtime
        run: |
          case "${{ inputs.runtime-type }}" in
            "python")
              echo "Setting up Python ${{ inputs.runtime-version }}"
              ;;
            "node")
              echo "Setting up Node.js ${{ inputs.runtime-version }}"
              ;;
            "java")
              echo "Setting up Java ${{ inputs.runtime-version }}"
              ;;
            "dotnet")
              echo "Setting up .NET ${{ inputs.runtime-version }}"
              ;;
            "go")
              echo "Setting up Go ${{ inputs.runtime-version }}"
              ;;
            *)
              echo "Unknown runtime type: ${{ inputs.runtime-type }}"
              exit 1
              ;;
          esac
          
      - name: 🐍 Setup Python
        if: inputs.runtime-type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.runtime-version }}
          cache: 'pip'
          
      - name: 🟢 Setup Node.js
        if: inputs.runtime-type == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.runtime-version }}
          cache: 'npm'
          
      - name: ☕ Setup Java
        if: inputs.runtime-type == 'java'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.runtime-version }}
          distribution: 'temurin'
          
      - name: 🔷 Setup .NET
        if: inputs.runtime-type == 'dotnet'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.runtime-version }}
          
      - name: 🐹 Setup Go
        if: inputs.runtime-type == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.runtime-version }}
          
      - name: 📦 Install dependencies
        id: install
        run: |
          if [[ -n "${{ inputs.install-command }}" ]]; then
            ${{ inputs.install-command }}
          else
            case "${{ inputs.runtime-type }}" in
              "python")
                if [[ -f "requirements.txt" ]]; then
                  pip install -r requirements.txt
                elif [[ -f "pyproject.toml" ]]; then
                  pip install -e .
                else
                  echo "No dependency file found"
                fi
                ;;
              "node")
                npm ci
                ;;
              "java")
                if [[ -f "pom.xml" ]]; then
                  mvn dependency:resolve
                elif [[ -f "build.gradle" ]]; then
                  ./gradlew build --no-daemon
                fi
                ;;
              "dotnet")
                dotnet restore
                ;;
              "go")
                go mod download
                ;;
            esac
          fi
          
      - name: 🔍 Run code quality checks
        if: inputs.enable-linting
        continue-on-error: true
        id: lint
        run: |
          LINT_STATUS="success"
          case "${{ inputs.runtime-type }}" in
            "python")
              if command -v flake8 &> /dev/null; then
                flake8 . || LINT_STATUS="failed"
              elif command -v pylint &> /dev/null; then
                pylint **/*.py || LINT_STATUS="failed"
              else
                echo "No linting tools found for Python"
              fi
              ;;
            "node")
              npm run lint || LINT_STATUS="failed"
              ;;
            "java")
              # Java linting would typically be done via Maven/Gradle plugins
              echo "Java linting via build tools"
              ;;
            "dotnet")
              dotnet format --verify-no-changes || LINT_STATUS="failed"
              ;;
            "go")
              go vet ./... || LINT_STATUS="failed"
              gofmt -l . | grep -q . && LINT_STATUS="failed"
              ;;
          esac
          echo "lint-status=$LINT_STATUS" >> $GITHUB_OUTPUT
          
      - name: 🧪 Run tests
        if: inputs.enable-tests
        id: test
        continue-on-error: true
        run: |
          TEST_STATUS="success"
          if [[ -n "${{ inputs.test-command }}" ]]; then
            ${{ inputs.test-command }} || TEST_STATUS="failed"
          else
            case "${{ inputs.runtime-type }}" in
              "python")
                if command -v pytest &> /dev/null; then
                  pytest --cov --cov-report=xml || TEST_STATUS="failed"
                elif [[ -f "manage.py" ]]; then
                  python manage.py test || TEST_STATUS="failed"
                else
                  python -m unittest discover || TEST_STATUS="failed"
                fi
                ;;
              "node")
                npm test || TEST_STATUS="failed"
                ;;
              "java")
                if [[ -f "pom.xml" ]]; then
                  mvn test || TEST_STATUS="failed"
                elif [[ -f "build.gradle" ]]; then
                  ./gradlew test || TEST_STATUS="failed"
                fi
                ;;
              "dotnet")
                dotnet test || TEST_STATUS="failed"
                ;;
              "go")
                go test ./... -v || TEST_STATUS="failed"
                ;;
            esac
          fi
          echo "test-status=$TEST_STATUS" >> $GITHUB_OUTPUT
          
      - name: 🏗️ Build application
        id: build
        run: |
          BUILD_STATUS="success"
          if [[ -n "${{ inputs.build-command }}" ]]; then
            ${{ inputs.build-command }} || BUILD_STATUS="failed"
          else
            case "${{ inputs.runtime-type }}" in
              "python")
                if [[ -f "setup.py" ]] || [[ -f "pyproject.toml" ]]; then
                  python -m build || BUILD_STATUS="failed"
                else
                  echo "No build configuration found for Python project"
                fi
                ;;
              "node")
                npm run build || echo "No build script found"
                ;;
              "java")
                if [[ -f "pom.xml" ]]; then
                  mvn compile || BUILD_STATUS="failed"
                elif [[ -f "build.gradle" ]]; then
                  ./gradlew assemble || BUILD_STATUS="failed"
                fi
                ;;
              "dotnet")
                dotnet build || BUILD_STATUS="failed"
                ;;
              "go")
                go build ./... || BUILD_STATUS="failed"
                ;;
            esac
          fi
          echo "build-status=$BUILD_STATUS" >> $GITHUB_OUTPUT
          
      - name: 📊 Generate build summary
        id: build-status
        run: |
          BUILD_SIZE=""
          ARTIFACT_PATH="${{ inputs.build-path }}"
          
          # Determine actual artifact path based on runtime
          case "${{ inputs.runtime-type }}" in
            "python")
              if [[ -d "dist" ]]; then
                ARTIFACT_PATH="./dist"
                BUILD_SIZE=$(du -sh dist | cut -f1)
              fi
              ;;
            "java")
              if [[ -d "target" ]]; then
                ARTIFACT_PATH="./target"
                BUILD_SIZE=$(du -sh target | cut -f1)
              elif [[ -d "build/libs" ]]; then
                ARTIFACT_PATH="./build/libs"
                BUILD_SIZE=$(du -sh build/libs | cut -f1)
              fi
              ;;
            "dotnet")
              if [[ -d "bin" ]]; then
                ARTIFACT_PATH="./bin"
                BUILD_SIZE=$(du -sh bin | cut -f1)
              fi
              ;;
            "go")
              # Go builds typically produce single binaries
              ARTIFACT_PATH="./"
              ;;
          esac
          
          echo "artifact-path=$ARTIFACT_PATH" >> $GITHUB_OUTPUT
          
          echo "## ⚙️ Backend Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Runtime:** ${{ inputs.runtime-type }} ${{ inputs.runtime-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Artifact Path:** $ARTIFACT_PATH" >> $GITHUB_STEP_SUMMARY
          if [[ -n "$BUILD_SIZE" ]]; then
            echo "**Build Size:** $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build results
          echo "### ✅ Build Results" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.build.outputs.build-status }}" == "success" ]]; then
            echo "- 🏗️ **Build:** ✅ Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🏗️ **Build:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Linting results
          if [[ "${{ inputs.enable-linting }}" == "true" ]]; then
            if [[ "${{ steps.lint.outputs.lint-status }}" == "success" ]]; then
              echo "- 🔍 **Code Quality:** ✅ Clean" >> $GITHUB_STEP_SUMMARY
            else
              echo "- 🔍 **Code Quality:** ⚠️ Issues found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- 🔍 **Code Quality:** ⏭️ Disabled" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test results
          if [[ "${{ inputs.enable-tests }}" == "true" ]]; then
            if [[ "${{ steps.test.outputs.test-status }}" == "success" ]]; then
              echo "- 🧪 **Tests:** ✅ All passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "- 🧪 **Tests:** ❌ Some failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- 🧪 **Tests:** ⏭️ Disabled" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Overall status
          if [[ "${{ steps.build.outputs.build-status }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi
          
      - name: 📤 Upload build artifacts
        if: steps.build-status.outputs.artifact-path != './'
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ${{ steps.build-status.outputs.artifact-path }}
          retention-days: 7
          
      - name: 📋 Test summary
        id: test-summary
        if: inputs.enable-tests
        run: |
          if [[ "${{ steps.test.outputs.test-status }}" == "success" ]]; then
            echo "results=All tests passed ✅" >> $GITHUB_OUTPUT
          else
            echo "results=Some tests failed ❌" >> $GITHUB_OUTPUT
          fi