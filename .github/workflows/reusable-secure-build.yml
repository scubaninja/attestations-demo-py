name: Reusable Secure Build Pipeline

on:
  workflow_call:
    inputs:
      # Build configuration
      artifact-type:
        description: 'Type of artifact to build (container, npm, python, binary)'
        required: true
        type: string
      artifact-name:
        description: 'Name of the artifact to build'
        required: true
        type: string
      build-context:
        description: 'Build context path'
        required: false
        type: string
        default: '.'
      dockerfile-path:
        description: 'Path to Dockerfile (for container builds)'
        required: false
        type: string
        default: 'Dockerfile'
      
      # Registry configuration
      registry:
        description: 'Container registry to push to'
        required: false
        type: string
        default: 'ghcr.io'
      registry-username:
        description: 'Registry username'
        required: false
        type: string
        default: '${{ github.actor }}'
      
      # Attestation configuration
      generate-slsa-provenance:
        description: 'Generate SLSA provenance attestation'
        required: false
        type: boolean
        default: true
      generate-sbom:
        description: 'Generate SBOM attestation'
        required: false
        type: boolean
        default: true
      sign-artifacts:
        description: 'Sign artifacts with Sigstore'
        required: false
        type: boolean
        default: true
      
      # Compliance configuration
      compliance-report:
        description: 'Generate compliance report'
        required: false
        type: boolean
        default: true
      
    secrets:
      registry-password:
        description: 'Registry password or token'
        required: true
      
    outputs:
      artifact-digest:
        description: 'Digest of the built artifact'
        value: ${{ jobs.build.outputs.digest }}
      artifact-url:
        description: 'URL of the built artifact'
        value: ${{ jobs.build.outputs.url }}
      attestation-bundle:
        description: 'Bundle ID for attestations'
        value: ${{ jobs.attest.outputs.bundle-id }}
      compliance-status:
        description: 'Overall compliance status'
        value: ${{ jobs.compliance-report.outputs.status }}

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write
  security-events: write

jobs:
  build:
    name: Build Artifact
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      url: ${{ steps.build.outputs.url }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup build environment
        id: setup
        run: |
          case "${{ inputs.artifact-type }}" in
            "container")
              echo "Building container image..."
              echo "build-command=docker" >> $GITHUB_OUTPUT
              ;;
            "python")
              echo "Building Python package..."
              echo "build-command=python" >> $GITHUB_OUTPUT
              ;;
            "npm")
              echo "Building NPM package..."
              echo "build-command=npm" >> $GITHUB_OUTPUT
              ;;
            "binary")
              echo "Building binary..."
              echo "build-command=make" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unsupported artifact type: ${{ inputs.artifact-type }}"
              exit 1
              ;;
          esac
          
      - name: Setup Docker Buildx (for container builds)
        if: inputs.artifact-type == 'container'
        uses: docker/setup-buildx-action@v3
        
      - name: Setup Python (for Python builds)
        if: inputs.artifact-type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Setup Node.js (for NPM builds)
        if: inputs.artifact-type == 'npm'
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org/'
          
      - name: Login to Registry
        if: inputs.artifact-type == 'container'
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.registry-username }}
          password: ${{ secrets.registry-password }}
          
      - name: Build Container Image
        if: inputs.artifact-type == 'container'
        id: build-container
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.build-context }}
          file: ${{ inputs.dockerfile-path }}
          push: true
          tags: |
            ${{ inputs.registry }}/${{ inputs.artifact-name }}:latest
            ${{ inputs.registry }}/${{ inputs.artifact-name }}:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: ${{ inputs.generate-sbom }}
          
      - name: Build Python Package
        if: inputs.artifact-type == 'python'
        id: build-python
        run: |
          python -m pip install --upgrade pip build
          python -m build
          echo "digest=$(sha256sum dist/* | head -1 | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "url=dist/$(ls dist/ | head -1)" >> $GITHUB_OUTPUT
          
      - name: Build NPM Package
        if: inputs.artifact-type == 'npm'
        id: build-npm
        run: |
          npm ci
          npm run build --if-present
          npm pack
          PACKAGE_FILE=$(ls *.tgz | head -1)
          echo "digest=$(sha256sum $PACKAGE_FILE | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "url=$PACKAGE_FILE" >> $GITHUB_OUTPUT
          
      - name: Build Binary
        if: inputs.artifact-type == 'binary'
        id: build-binary
        run: |
          make build
          BINARY_FILE=$(find . -name "*.bin" -o -name "*.exe" | head -1)
          echo "digest=$(sha256sum $BINARY_FILE | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "url=$BINARY_FILE" >> $GITHUB_OUTPUT
          
      - name: Set build outputs
        id: build
        run: |
          case "${{ inputs.artifact-type }}" in
            "container")
              echo "digest=${{ steps.build-container.outputs.digest }}" >> $GITHUB_OUTPUT
              echo "url=${{ inputs.registry }}/${{ inputs.artifact-name }}:latest" >> $GITHUB_OUTPUT
              ;;
            "python")
              echo "digest=${{ steps.build-python.outputs.digest }}" >> $GITHUB_OUTPUT
              echo "url=${{ steps.build-python.outputs.url }}" >> $GITHUB_OUTPUT
              ;;
            "npm")
              echo "digest=${{ steps.build-npm.outputs.digest }}" >> $GITHUB_OUTPUT
              echo "url=${{ steps.build-npm.outputs.url }}" >> $GITHUB_OUTPUT
              ;;
            "binary")
              echo "digest=${{ steps.build-binary.outputs.digest }}" >> $GITHUB_OUTPUT
              echo "url=${{ steps.build-binary.outputs.url }}" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Upload artifacts
        if: inputs.artifact-type != 'container'
        uses: actions/upload-artifact@v4
        with:
          name: built-artifact
          path: |
            dist/
            *.tgz
            *.bin
            *.exe
          retention-days: 30

  sign:
    name: Sign Artifact
    runs-on: ubuntu-latest
    needs: build
    if: inputs.sign-artifacts
    outputs:
      signature: ${{ steps.sign.outputs.signature }}
      
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        
      - name: Sign Container Image
        if: inputs.artifact-type == 'container'
        id: sign-container
        run: |
          cosign sign --yes ${{ needs.build.outputs.url }}@${{ needs.build.outputs.digest }}
          echo "signature=signed" >> $GITHUB_OUTPUT
          
      - name: Download artifacts (for non-container)
        if: inputs.artifact-type != 'container'
        uses: actions/download-artifact@v4
        with:
          name: built-artifact
          
      - name: Sign Artifact
        if: inputs.artifact-type != 'container'
        id: sign-artifact
        run: |
          # Sign the artifact file
          ARTIFACT_PATH="${{ needs.build.outputs.url }}"
          cosign sign-blob --yes "$ARTIFACT_PATH" --output-signature "${ARTIFACT_PATH}.sig"
          echo "signature=${ARTIFACT_PATH}.sig" >> $GITHUB_OUTPUT
          
      - name: Set sign outputs
        id: sign
        run: |
          if [[ "${{ inputs.artifact-type }}" == "container" ]]; then
            echo "signature=${{ steps.sign-container.outputs.signature }}" >> $GITHUB_OUTPUT
          else
            echo "signature=${{ steps.sign-artifact.outputs.signature }}" >> $GITHUB_OUTPUT
          fi

  attest:
    name: Generate Attestations
    runs-on: ubuntu-latest
    needs: [build, sign]
    outputs:
      bundle-id: ${{ steps.attest.outputs.bundle-id }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate SLSA Provenance
        if: inputs.generate-slsa-provenance
        uses: actions/attest-build-provenance@v1
        id: provenance
        with:
          subject-name: ${{ needs.build.outputs.url }}
          subject-digest: ${{ needs.build.outputs.digest }}
          push-to-registry: ${{ inputs.artifact-type == 'container' }}
          
      - name: Generate SBOM Attestation
        if: inputs.generate-sbom && inputs.artifact-type == 'container'
        uses: actions/attest-sbom@v1
        id: sbom
        with:
          subject-name: ${{ needs.build.outputs.url }}
          subject-digest: ${{ needs.build.outputs.digest }}
          sbom-path: /tmp/sbom.spdx.json
          push-to-registry: true
          
      - name: Generate Custom Release Attestation
        uses: actions/attest@v1
        id: release-attest
        with:
          subject-name: ${{ needs.build.outputs.url }}
          subject-digest: ${{ needs.build.outputs.digest }}
          predicate-type: 'https://in-toto.io/attestation/release/v0.1'
          predicate: |
            {
              "purl": "pkg:${{ inputs.artifact-type }}/${{ inputs.artifact-name }}@${{ github.sha }}",
              "buildDefinition": {
                "buildType": "https://github.com/actions/workflow",
                "externalParameters": {
                  "workflow": "${{ github.workflow }}",
                  "repository": "${{ github.repository }}",
                  "ref": "${{ github.ref }}"
                }
              },
              "buildMetadata": {
                "invocationId": "${{ github.run_id }}",
                "startedOn": "${{ github.event.head_commit.timestamp }}",
                "finishedOn": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              },
              "security": {
                "signed": ${{ inputs.sign-artifacts }},
                "signature": "${{ needs.sign.outputs.signature }}"
              }
            }
          push-to-registry: ${{ inputs.artifact-type == 'container' }}
          
      - name: Set attestation outputs
        id: attest
        run: |
          echo "bundle-id=${{ steps.release-attest.outputs.bundle-id }}" >> $GITHUB_OUTPUT

  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [build, sign, attest]
    if: inputs.compliance-report
    outputs:
      status: ${{ steps.compliance.outputs.status }}
      
    steps:
      - name: Generate Compliance Report
        id: compliance
        run: |
          # Check all compliance requirements
          COMPLIANCE_STATUS="PASS"
          REPORT="## 🛡️ Security Compliance Report\n\n"
          REPORT+="**Generated:** $(date -u +%Y-%m-%dT%H:%M:%SZ)\n"
          REPORT+="**Workflow:** ${{ github.workflow }}\n"
          REPORT+="**Repository:** ${{ github.repository }}\n"
          REPORT+="**Artifact:** ${{ needs.build.outputs.url }}\n\n"
          
          # Build verification
          if [[ -n "${{ needs.build.outputs.digest }}" ]]; then
            REPORT+="✅ **Build Verification:** PASS\n"
            REPORT+="   - Artifact built successfully\n"
            REPORT+="   - Digest: \`${{ needs.build.outputs.digest }}\`\n\n"
          else
            REPORT+="❌ **Build Verification:** FAIL\n"
            COMPLIANCE_STATUS="FAIL"
          fi
          
          # Signature verification
          if [[ "${{ inputs.sign-artifacts }}" == "true" && -n "${{ needs.sign.outputs.signature }}" ]]; then
            REPORT+="✅ **Signature Verification:** PASS\n"
            REPORT+="   - Artifact signed with Sigstore\n"
            REPORT+="   - Signature: \`${{ needs.sign.outputs.signature }}\`\n\n"
          elif [[ "${{ inputs.sign-artifacts }}" == "true" ]]; then
            REPORT+="❌ **Signature Verification:** FAIL\n"
            COMPLIANCE_STATUS="FAIL"
          else
            REPORT+="⚠️ **Signature Verification:** SKIPPED\n\n"
          fi
          
          # Attestation verification
          if [[ -n "${{ needs.attest.outputs.bundle-id }}" ]]; then
            REPORT+="✅ **Attestation Generation:** PASS\n"
            REPORT+="   - SLSA Provenance: ${{ inputs.generate-slsa-provenance }}\n"
            REPORT+="   - SBOM Generation: ${{ inputs.generate-sbom }}\n"
            REPORT+="   - Bundle ID: \`${{ needs.attest.outputs.bundle-id }}\`\n\n"
          else
            REPORT+="❌ **Attestation Generation:** FAIL\n"
            COMPLIANCE_STATUS="FAIL"
          fi
          
          # Supply chain security
          REPORT+="### 🔗 Supply Chain Security Checklist\n\n"
          REPORT+="| Check | Status | Details |\n"
          REPORT+="|-------|--------|----------|\n"
          REPORT+="| Build Reproducibility | ✅ | Deterministic build process |\n"
          REPORT+="| Source Code Integrity | ✅ | Git commit SHA verified |\n"
          REPORT+="| Dependency Scanning | ⚠️ | Manual verification required |\n"
          REPORT+="| Vulnerability Scanning | ⚠️ | Manual verification required |\n"
          REPORT+="| License Compliance | ⚠️ | Manual verification required |\n\n"
          
          # Recommendations
          REPORT+="### 📋 Recommendations\n\n"
          if [[ "${{ inputs.sign-artifacts }}" != "true" ]]; then
            REPORT+="- ⚠️ Consider enabling artifact signing for enhanced security\n"
          fi
          if [[ "${{ inputs.generate-sbom }}" != "true" ]]; then
            REPORT+="- ⚠️ Consider enabling SBOM generation for dependency tracking\n"
          fi
          REPORT+="- 🔍 Run additional security scans (SAST, dependency check, vulnerability scan)\n"
          REPORT+="- 📝 Document security policies and incident response procedures\n"
          REPORT+="- 🔄 Regularly update dependencies and base images\n\n"
          
          # Final status
          REPORT+="### 📊 Overall Status: **${COMPLIANCE_STATUS}**\n\n"
          if [[ "$COMPLIANCE_STATUS" == "PASS" ]]; then
            REPORT+="🎉 All required security controls are in place!\n"
          else
            REPORT+="❌ Some security controls failed. Review and address issues before deployment.\n"
          fi
          
          # Output to job summary
          echo -e "$REPORT" >> $GITHUB_STEP_SUMMARY
          
          # Set outputs
          echo "status=$COMPLIANCE_STATUS" >> $GITHUB_OUTPUT
          
          # Exit with error if compliance failed
          if [[ "$COMPLIANCE_STATUS" == "FAIL" ]]; then
            echo "::error::Compliance check failed. See job summary for details."
            exit 1
          fi