name: Reusable Deployment Verification

on:
  workflow_call:
    inputs:
      # Artifact to verify
      artifact-url:
        description: 'URL of the artifact to verify'
        required: true
        type: string
      artifact-digest:
        description: 'Expected digest of the artifact'
        required: true
        type: string
      artifact-type:
        description: 'Type of artifact (container, npm, python, binary)'
        required: true
        type: string
      
      # Verification requirements
      require-signature:
        description: 'Require valid signature for deployment'
        required: false
        type: boolean
        default: true
      require-slsa-provenance:
        description: 'Require SLSA provenance attestation'
        required: false
        type: boolean
        default: true
      require-sbom:
        description: 'Require SBOM attestation'
        required: false
        type: boolean
        default: false
      min-slsa-level:
        description: 'Minimum required SLSA level (1-4)'
        required: false
        type: string
        default: '3'
      
      # Policy configuration
      policy-path:
        description: 'Path to custom verification policy (OPA Rego or similar)'
        required: false
        type: string
        default: ''
      allowed-signers:
        description: 'JSON array of allowed signer identities'
        required: false
        type: string
        default: '[]'
      
      # Deployment gates
      block-on-failure:
        description: 'Block deployment if verification fails'
        required: false
        type: boolean
        default: true
      
    outputs:
      verification-status:
        description: 'Overall verification status (PASS/FAIL)'
        value: ${{ jobs.verify.outputs.status }}
      verification-report:
        description: 'Detailed verification report'
        value: ${{ jobs.verify.outputs.report }}
      deployment-allowed:
        description: 'Whether deployment should be allowed'
        value: ${{ jobs.gate.outputs.allowed }}

permissions:
  contents: read
  attestations: read
  security-events: write

jobs:
  verify:
    name: Verify Attestations & Signatures
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.verification.outputs.status }}
      report: ${{ steps.verification.outputs.report }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install verification tools
        run: |
          # Install cosign for signature verification
          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          sudo chmod +x /usr/local/bin/cosign
          
          # Install gh attestation plugin
          gh extension install github/gh-attestation
          
          # Install slsa-verifier
          curl -Lo slsa-verifier https://github.com/slsa-framework/slsa-verifier/releases/latest/download/slsa-verifier-linux-amd64
          sudo mv slsa-verifier /usr/local/bin/
          sudo chmod +x /usr/local/bin/slsa-verifier
          
      - name: Verify Signature
        id: verify-signature
        if: inputs.require-signature
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Verifying signature for ${{ inputs.artifact-url }}@${{ inputs.artifact-digest }}"
          
          VERIFICATION_STATUS="PASS"
          SIGNATURE_DETAILS=""
          
          if [[ "${{ inputs.artifact-type }}" == "container" ]]; then
            # Verify container signature
            if cosign verify ${{ inputs.artifact-url }}@${{ inputs.artifact-digest }} \
               --certificate-identity-regexp="^https://github.com/${{ github.repository }}/" \
               --certificate-oidc-issuer=https://token.actions.githubusercontent.com 2>/dev/null; then
              echo "✅ Container signature verified"
              SIGNATURE_DETAILS="Valid Sigstore signature found"
            else
              echo "❌ Container signature verification failed"
              VERIFICATION_STATUS="FAIL"
              SIGNATURE_DETAILS="No valid signature found or verification failed"
            fi
          else
            # For non-container artifacts, check for signature file
            if [[ -f "${{ inputs.artifact-url }}.sig" ]]; then
              if cosign verify-blob --certificate-identity-regexp="^https://github.com/${{ github.repository }}/" \
                 --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
                 --signature "${{ inputs.artifact-url }}.sig" "${{ inputs.artifact-url }}" 2>/dev/null; then
                echo "✅ Artifact signature verified"
                SIGNATURE_DETAILS="Valid Sigstore signature found"
              else
                echo "❌ Artifact signature verification failed"
                VERIFICATION_STATUS="FAIL"
                SIGNATURE_DETAILS="Signature file exists but verification failed"
              fi
            else
              echo "❌ No signature file found"
              VERIFICATION_STATUS="FAIL"
              SIGNATURE_DETAILS="No signature file found"
            fi
          fi
          
          echo "signature-status=$VERIFICATION_STATUS" >> $GITHUB_OUTPUT
          echo "signature-details=$SIGNATURE_DETAILS" >> $GITHUB_OUTPUT
          
      - name: Verify SLSA Provenance
        id: verify-provenance
        if: inputs.require-slsa-provenance
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Verifying SLSA provenance for ${{ inputs.artifact-url }}@${{ inputs.artifact-digest }}"
          
          PROVENANCE_STATUS="PASS"
          PROVENANCE_DETAILS=""
          SLSA_LEVEL="0"
          
          # Download and verify provenance attestation
          if gh attestation verify ${{ inputs.artifact-url }}@${{ inputs.artifact-digest }} \
             --owner ${{ github.repository_owner }} 2>/dev/null; then
            
            echo "✅ Provenance attestation found and verified"
            
            # Extract SLSA level from provenance
            PROVENANCE_DATA=$(gh attestation download ${{ inputs.artifact-url }}@${{ inputs.artifact-digest }} \
              --owner ${{ github.repository_owner }} -f json 2>/dev/null | head -1)
            
            if [[ -n "$PROVENANCE_DATA" ]]; then
              # Check build level indicators
              if echo "$PROVENANCE_DATA" | jq -e '.predicate.buildDefinition.buildType' >/dev/null 2>&1; then
                SLSA_LEVEL="3"  # GitHub Actions provides SLSA L3
                PROVENANCE_DETAILS="SLSA Level 3 - GitHub Actions hosted build"
              else
                SLSA_LEVEL="1"
                PROVENANCE_DETAILS="Basic provenance available"
              fi
              
              # Verify minimum SLSA level requirement
              if [[ "$SLSA_LEVEL" -lt "${{ inputs.min-slsa-level }}" ]]; then
                echo "❌ SLSA level $SLSA_LEVEL below required minimum ${{ inputs.min-slsa-level }}"
                PROVENANCE_STATUS="FAIL"
                PROVENANCE_DETAILS="$PROVENANCE_DETAILS (below required level)"
              fi
            else
              echo "⚠️ Provenance found but could not parse SLSA level"
              PROVENANCE_DETAILS="Provenance exists but SLSA level unknown"
            fi
          else
            echo "❌ No provenance attestation found or verification failed"
            PROVENANCE_STATUS="FAIL"
            PROVENANCE_DETAILS="No valid provenance attestation found"
          fi
          
          echo "provenance-status=$PROVENANCE_STATUS" >> $GITHUB_OUTPUT
          echo "provenance-details=$PROVENANCE_DETAILS" >> $GITHUB_OUTPUT
          echo "slsa-level=$SLSA_LEVEL" >> $GITHUB_OUTPUT
          
      - name: Verify SBOM
        id: verify-sbom
        if: inputs.require-sbom
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Verifying SBOM for ${{ inputs.artifact-url }}@${{ inputs.artifact-digest }}"
          
          SBOM_STATUS="PASS"
          SBOM_DETAILS=""
          
          # Check for SBOM attestation
          if gh attestation verify ${{ inputs.artifact-url }}@${{ inputs.artifact-digest }} \
             --owner ${{ github.repository_owner }} \
             --predicate-type https://spdx.dev/Document 2>/dev/null; then
            echo "✅ SBOM attestation found and verified"
            SBOM_DETAILS="Valid SBOM attestation found"
          else
            echo "❌ No SBOM attestation found"
            SBOM_STATUS="FAIL"
            SBOM_DETAILS="No SBOM attestation found"
          fi
          
          echo "sbom-status=$SBOM_STATUS" >> $GITHUB_OUTPUT
          echo "sbom-details=$SBOM_DETAILS" >> $GITHUB_OUTPUT
          
      - name: Custom Policy Verification
        id: verify-policy
        if: inputs.policy-path != ''
        run: |
          echo "Running custom policy verification: ${{ inputs.policy-path }}"
          
          POLICY_STATUS="PASS"
          POLICY_DETAILS=""
          
          if [[ -f "${{ inputs.policy-path }}" ]]; then
            # This is a placeholder for custom policy verification
            # In practice, you'd use tools like OPA, Conftest, or similar
            echo "✅ Custom policy file found: ${{ inputs.policy-path }}"
            POLICY_DETAILS="Custom policy verification completed"
            
            # Example: Basic policy checks
            if grep -q "deny" "${{ inputs.policy-path }}"; then
              echo "⚠️ Deny rules found in policy"
            fi
          else
            echo "❌ Custom policy file not found"
            POLICY_STATUS="FAIL"
            POLICY_DETAILS="Policy file not found: ${{ inputs.policy-path }}"
          fi
          
          echo "policy-status=$POLICY_STATUS" >> $GITHUB_OUTPUT
          echo "policy-details=$POLICY_DETAILS" >> $GITHUB_OUTPUT
          
      - name: Generate Verification Report
        id: verification
        run: |
          # Determine overall status
          OVERALL_STATUS="PASS"
          FAILED_CHECKS=()
          
          # Check signature verification
          if [[ "${{ inputs.require-signature }}" == "true" ]]; then
            if [[ "${{ steps.verify-signature.outputs.signature-status }}" == "FAIL" ]]; then
              OVERALL_STATUS="FAIL"
              FAILED_CHECKS+=("Signature")
            fi
          fi
          
          # Check provenance verification  
          if [[ "${{ inputs.require-slsa-provenance }}" == "true" ]]; then
            if [[ "${{ steps.verify-provenance.outputs.provenance-status }}" == "FAIL" ]]; then
              OVERALL_STATUS="FAIL"
              FAILED_CHECKS+=("SLSA Provenance")
            fi
          fi
          
          # Check SBOM verification
          if [[ "${{ inputs.require-sbom }}" == "true" ]]; then
            if [[ "${{ steps.verify-sbom.outputs.sbom-status }}" == "FAIL" ]]; then
              OVERALL_STATUS="FAIL"
              FAILED_CHECKS+=("SBOM")
            fi
          fi
          
          # Check custom policy
          if [[ "${{ inputs.policy-path }}" != "" ]]; then
            if [[ "${{ steps.verify-policy.outputs.policy-status }}" == "FAIL" ]]; then
              OVERALL_STATUS="FAIL"
              FAILED_CHECKS+=("Custom Policy")
            fi
          fi
          
          # Generate detailed report
          REPORT="## 🔒 Deployment Verification Report\n\n"
          REPORT+="**Artifact:** \`${{ inputs.artifact-url }}\`\n"
          REPORT+="**Digest:** \`${{ inputs.artifact-digest }}\`\n"
          REPORT+="**Type:** ${{ inputs.artifact-type }}\n"
          REPORT+="**Verified:** $(date -u +%Y-%m-%dT%H:%M:%SZ)\n\n"
          
          # Status indicator
          if [[ "$OVERALL_STATUS" == "PASS" ]]; then
            REPORT+="### ✅ **Status: VERIFIED** - Deployment Approved\n\n"
          else
            REPORT+="### ❌ **Status: VERIFICATION FAILED** - Deployment Blocked\n\n"
            REPORT+="**Failed Checks:** ${FAILED_CHECKS[*]}\n\n"
          fi
          
          # Detailed verification results
          REPORT+="### 📋 Verification Results\n\n"
          REPORT+="| Check | Required | Status | Details |\n"
          REPORT+="|-------|----------|--------|----------|\n"
          
          # Signature check
          if [[ "${{ inputs.require-signature }}" == "true" ]]; then
            if [[ "${{ steps.verify-signature.outputs.signature-status }}" == "PASS" ]]; then
              REPORT+="| Digital Signature | ✅ Yes | ✅ Pass | ${{ steps.verify-signature.outputs.signature-details }} |\n"
            else
              REPORT+="| Digital Signature | ✅ Yes | ❌ Fail | ${{ steps.verify-signature.outputs.signature-details }} |\n"
            fi
          else
            REPORT+="| Digital Signature | ⚪ No | ⏭️ Skip | Not required |\n"
          fi
          
          # Provenance check
          if [[ "${{ inputs.require-slsa-provenance }}" == "true" ]]; then
            if [[ "${{ steps.verify-provenance.outputs.provenance-status }}" == "PASS" ]]; then
              REPORT+="| SLSA Provenance | ✅ Yes | ✅ Pass | ${{ steps.verify-provenance.outputs.provenance-details }} (Level ${{ steps.verify-provenance.outputs.slsa-level }}) |\n"
            else
              REPORT+="| SLSA Provenance | ✅ Yes | ❌ Fail | ${{ steps.verify-provenance.outputs.provenance-details }} |\n"
            fi
          else
            REPORT+="| SLSA Provenance | ⚪ No | ⏭️ Skip | Not required |\n"
          fi
          
          # SBOM check
          if [[ "${{ inputs.require-sbom }}" == "true" ]]; then
            if [[ "${{ steps.verify-sbom.outputs.sbom-status }}" == "PASS" ]]; then
              REPORT+="| SBOM Attestation | ✅ Yes | ✅ Pass | ${{ steps.verify-sbom.outputs.sbom-details }} |\n"
            else
              REPORT+="| SBOM Attestation | ✅ Yes | ❌ Fail | ${{ steps.verify-sbom.outputs.sbom-details }} |\n"
            fi
          else
            REPORT+="| SBOM Attestation | ⚪ No | ⏭️ Skip | Not required |\n"
          fi
          
          # Custom policy check
          if [[ "${{ inputs.policy-path }}" != "" ]]; then
            if [[ "${{ steps.verify-policy.outputs.policy-status }}" == "PASS" ]]; then
              REPORT+="| Custom Policy | ✅ Yes | ✅ Pass | ${{ steps.verify-policy.outputs.policy-details }} |\n"
            else
              REPORT+="| Custom Policy | ✅ Yes | ❌ Fail | ${{ steps.verify-policy.outputs.policy-details }} |\n"
            fi
          else
            REPORT+="| Custom Policy | ⚪ No | ⏭️ Skip | No policy specified |\n"
          fi
          
          REPORT+="\n"
          
          # Security summary
          REPORT+="### 🛡️ Security Summary\n\n"
          REPORT+="- **Supply Chain Security:** Verified through attestations\n"
          REPORT+="- **Build Integrity:** ${{ inputs.require-slsa-provenance && 'Verified' || 'Not verified' }}\n"
          REPORT+="- **Artifact Signing:** ${{ inputs.require-signature && 'Required and verified' || 'Not required' }}\n"
          REPORT+="- **SLSA Level:** ${{ steps.verify-provenance.outputs.slsa-level || 'Not determined' }}\n\n"
          
          # Output report to job summary
          echo -e "$REPORT" >> $GITHUB_STEP_SUMMARY
          
          # Set outputs
          echo "status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo -e "$REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: verify
    outputs:
      allowed: ${{ steps.gate.outputs.allowed }}
      
    steps:
      - name: Deployment Gate Decision
        id: gate
        run: |
          VERIFICATION_STATUS="${{ needs.verify.outputs.status }}"
          BLOCK_ON_FAILURE="${{ inputs.block-on-failure }}"
          
          if [[ "$VERIFICATION_STATUS" == "PASS" ]]; then
            echo "✅ All verifications passed - Deployment APPROVED"
            echo "allowed=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "❌ Verification failed"
            if [[ "$BLOCK_ON_FAILURE" == "true" ]]; then
              echo "🚫 Deployment BLOCKED due to failed verification"
              echo "allowed=false" >> $GITHUB_OUTPUT
              echo "::error::Deployment blocked due to failed security verification. Check the verification report for details."
              exit 1
            else
              echo "⚠️ Verification failed but deployment gate is disabled - Deployment ALLOWED with warnings"
              echo "allowed=true" >> $GITHUB_OUTPUT
              echo "::warning::Security verification failed but deployment is proceeding. This is not recommended for production."
              exit 0
            fi
          fi